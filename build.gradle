plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'io.shcm.shsupercm.fabric.fletchingtable' version '1.6'
}

version = "${property('mod.version')}+${stonecutter.current().version()}"
group = 'shcm.shsupercm.fabric.citresewn'

repositories {
    maven { url 'https://maven.terraformersmc.com/releases/' }
    maven { url 'https://maven.shedaniel.me/' }
}

dependencies {
    minecraft "com.mojang:minecraft:${stonecutter.current().version()}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"

    modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric-loader')}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric-api')}"

    modImplementation "com.terraformersmc:modmenu:${property('deps.modmenu')}"
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:${property('deps.cloth-config')}"

    include project(":defaults:${stonecutter.current().version()}")
}

fletchingTable {
    defaultMixinEnvironment = "auto"
}

loom {
    accessWidenerPath = file("../../src/main/resources/citresewn.accesswidener")

    runConfigs.configureEach {
        ideConfigGenerated = true
    }
}

java {
    //withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    archivesBaseName = property('mod.jarname')
}

processResources {
    filesMatching('fabric.mod.json') {
        expand 'mod_version': version, 'mod_target_mc': project.property('mod.target-mc')
    }
}

jar {
    archiveClassifier.set 'dev'

    from rootProject.file('LICENSE')
}

if (stonecutter.current().isActiveVersion()) {
    plugins.apply 'com.modrinth.minotaur'
    plugins.apply 'com.matthewprenger.cursegradle'

    modrinth {
        token = TOKEN_MODRINTH
        projectId = property('publish.modrinth.id')
        uploadFile = remapJar
        changelog = java.nio.file.Files.readString(rootProject.file("Changelog.md").toPath())
        versionNumber = version
        versionName = "v" + version
        //additionalFiles = [sourcesJar.outputs.getFiles().singleFile]
        gameVersions = Arrays.asList(property('mod.target-mc-publish').split(","))
    }

    curseforge {
        apiKey = TOKEN_CURSEFORGE
        project {
            id = property('publish.curseforge.id')
            changelogType = 'markdown'
            changelog = rootProject.file('Changelog.md')
            releaseType = 'release'
            mainArtifact(remapJar) {
                displayName = "v" + version
            }
            addGameVersion 'Fabric'
            for (String version : property('mod.target-mc-publish').split(","))
                addGameVersion version
        }
        options {
            forgeGradleIntegration = false
        }
    }

    rootProject.tasks.register('publish') {
        setGroup 'project'

        Task remapJarTask = tasks.getByName 'remapJar'
        Task curseforgeTask = tasks.getByName 'curseforge'
        Task modrinthTask = tasks.getByName 'modrinth'

        dependsOn remapJarTask, curseforgeTask, modrinthTask
        curseforgeTask.mustRunAfter remapJarTask
        modrinthTask.mustRunAfter remapJarTask
    }
}
